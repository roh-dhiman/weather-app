{"version":3,"sources":["components/title.js","components/form.js","components/weather.js","components/chart.js","App.js","serviceWorker.js","index.js","components/moon.png","components/sun.png"],"names":["Title","props","className","Form","onSubmit","loadSearch","style","border","padding","type","name","height","textAlign","placeholder","color","Weather","date","Math","round","Date","getTime","backgroundColor","sunset_ts","src","moon","alt","sun","forecast_temp","country","city","desc","forecast_humi","forecast_preci","forecast_date","Chart","data","chartDataTemp","options","title","display","text","fontSize","fontColor","legend","labels","chartDataHumi","chartDataPreci","api","App","state","temp","undefined","humi","preci","search","e","a","target","elements","value","preventDefault","fetch","forecast_api_call","json","forecast_res","console","log","count","push","valid_date","rh","precip","days","date_record","last","day","getDate","month","getMonth","year","getFullYear","back_date","history_api_call","result","weather","hourly","tempC","humidity","precipMM","setState","city_name","country_code","description","datasets","label","borderColor","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.1354bd31.chunk.js","sourcesContent":["import React from 'react';\nimport './weather.css';\n\nconst Title = (props) => {\n    return (\n        <>\n            <div>\n                <h1 className = \"title\"> Weather Forecast</h1>\n            </div>\n        </>\n    )\n}\n\nexport default Title;","import React from 'react';\nimport './weather.css';\n\nconst Form = (props) => {\n    return (\n\n            <form onSubmit = {props.loadSearch} className = \"container\" style={{border:'1px solid #ccc'}}>\n                <div className = \"row\">\n                    <div className = \"col\" style={{padding: '0'}}>\n                        <input type = \"text\" name = \"city\" className = \"form-control\" style={{ border: '0px solid', height:'100%', textAlign: 'left'}} placeholder = \"Enter city...\" />\n                    </div>\n\n                    <button className = \"btn btn-outline-light btn-lg\" style={{color:'gray'}}><i className=\"fas fa-search\"></i></button>\n                </div>\n            </form>\n\n    )\n}\n\nexport default Form;","import React from 'react';\nimport './weather.css';\nimport moon from './moon.png';\nimport sun from './sun.png';\n\nconst Weather = (props) => {\n    let date = Math.round(new Date().getTime()/1000);\n    return (\n\n        <div className = \"weather\">\n            <br />\n\n            <div className = \"container\" style={{border:'1px solid transparent', backgroundColor:'#7dcc93'}}>\n                <br/>\n                <div className=\"container today\">\n                    <p>{date>=props.sunset_ts && <img src={moon} className = \"image\" alt=\"moon\" />} </p>\n                    <p>{date<props.sunset_ts && <img src={sun} className = \"image\" alt=\"sun\"/>}</p>\n                    <p>{props.forecast_temp[0] && <p className = \"today-temp\">{props.forecast_temp[0]}Â°</p>}</p>\n                    <p>{props.country && props.city && <p className = \"location\">{props.city}, {props.country}</p>}</p>\n                    <p>{props.desc && <p>{props.desc}</p>}</p>\n                </div>\n                <div className = \"container main\">\n                    <br/>\n                    <p>{props.city && <p className = \"label1\">Additional Info</p>}</p>\n                    <p>{props.forecast_humi[0] && <p className = \"label\">Humidity: <b>{props.forecast_humi[0]}</b> %</p>}</p>\n                    <p>{props.forecast_preci[0] >=0 && <p className = \"label\">Precipitation: <b>{props.forecast_preci[0]}</b> mm</p>}</p>\n                </div>\n            </div>\n            <br/>\n            <div className = \"container\" style={{border:'1px solid transparent', backgroundColor:'#f76160'}}>\n                <br/>\n                <div>\n                    {props.forecast_temp[1] && <p><b className = \"label1\">Next 3 Days</b></p>}\n                </div>\n                <div className = \" container main\">\n                            <br/>\n                            <p>{props.forecast_date[1] &&<p className = \"label1\">{props.forecast_date[1]}</p>}</p>\n                            <p>{props.forecast_temp[1] && <p className = \"label\"><b>{props.forecast_temp[1]}</b>Â°</p>}</p>\n                            <p>{props.forecast_humi[1] && <p className = \"label\">Humidity: <b>{props.forecast_humi[1]}</b> %</p>}</p>\n                            <p>{props.forecast_preci[1] >=0 && <p className = \"label\">Precipitation: <b>{props.forecast_preci[1]}</b> mm</p>}</p>\n                </div>\n                <div className = \" container main\">\n                            <br/>\n                            <p>{props.forecast_date[2] &&<p className = \"label1\">{props.forecast_date[2]}</p>}</p>\n                            <p>{props.forecast_temp[2] && <p className = \"label\"><b>{props.forecast_temp[2]}</b>Â°</p>}</p>\n                            <p>{props.forecast_humi[2] && <p className = \"label\">Humidity: <b>{props.forecast_humi[2]}</b> %</p>}</p>\n                            <p>{props.forecast_preci[2] >=0 && <p className = \"label\">Precipitation: <b>{props.forecast_preci[2]}</b> mm</p>}</p>\n                </div>\n                <div className = \" container main\">\n                            <br/>\n                            <p>{props.forecast_date[3] &&<p className = \"label1\">{props.forecast_date[3]}</p>}</p>\n                            <p>{props.forecast_temp[3] && <p className = \"label\"><b>{props.forecast_temp[3]}</b>Â°</p>}</p>\n                            <p>{props.forecast_humi[3] && <p className = \"label\">Humidity: <b>{props.forecast_humi[3]}</b> %</p>}</p>\n                            <p>{props.forecast_preci[3] >=0 && <p className = \"label\">Precipitation: <b>{props.forecast_preci[3]}</b> mm</p>}</p>\n                </div>\n            </div>\n            <br />\n\n        </div>\n    )\n}\n\nexport default Weather;","import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nconst Chart = (props) => {\n\n    return (\n        <div className = \"chart\">\n            <br/>\n            <div className = \"chart-temp container\" style={{backgroundColor:'#a4c5c6'}}>\n                <Line\n                    data = {props.chartDataTemp}\n                    options = {{title: {\n                            display: true,\n                            text: 'Temperature variation',\n                            fontSize: 20,\n                            fontColor:'#fff'\n                            },\n                            legend: {\n                                display: true,\n                                labels: {\n                                    fontColor:'#fff',\n                                }\n                            }\n                    }}\n                />\n            </div>\n            <br/>\n            <div className = \"chart-humi container\" style={{backgroundColor:'#f8c687'}}>\n                <Line\n                    data={props.chartDataHumi}\n                    options={{title:{\n                        display:true,\n                        text:'Humidity variation',\n                        fontSize:20,\n                        fontColor:'#fff'\n                    },\n                    legend:{\n                        display:true,\n                        labels: {\n                            fontColor:'#fff'\n                        }\n                    }}}\n                />\n            </div>\n            <br/>\n            <div className = \"chart-preci container\" style={{backgroundColor:'#ffbaba'}}>\n                <Line\n                    data={props.chartDataPreci}\n                    options={{title:{\n                        display:true,\n                        text:'Precipitation variation',\n                        fontSize:20,\n                        fontColor:'#fff'\n                    },\n                    legend:{\n                        display:true,\n                        labels: {\n                            fontColor:'#fff'\n                        }\n                    }}}\n                />\n            </div>\n            <br/>\n        </div>\n    )\n}\n\nexport default Chart;","import React from 'react';\nimport './App.css';\nimport Title from './components/title';\nimport Form from './components/form';\nimport Weather from './components/weather';\nimport Chart from './components/chart';\n\nconst api = {\n  key: \"bff03f6366c448f6a45ab086a4bb1dcb\",\n  base: \"https://api.weatherbit.io/v2.0/\",\n  key_h: \"c60554e2076f458eb3382806202004\",\n  base_h: \"https://api.worldweatheronline.com/premium/v1/\"\n}\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    humi: undefined,\n    preci: undefined,\n    desc: undefined,\n    sunset_ts: undefined,\n    forecast_date: [],\n    forecast_temp: [],\n    forecast_humi: [],\n    forecast_preci: [],\n    chartDataTemp: {},\n    chartDataHumi: {},\n    chartDataPreci: {}\n  }\n\n  search = async(e) => {\n\n    const city = e.target.elements.city.value;\n\n    e.preventDefault();\n\n    if(city) {\n\n      const forecast_api_call = await fetch(`${api.base}forecast/daily?city=${city}&days=4&key=${api.key}`);\n      const forecast_res = await forecast_api_call.json();\n\n      console.log(forecast_res);\n\n      let forecast_date = [];\n      let forecast_temp = [];\n      let forecast_humi = [];\n      let forecast_preci = [];\n      let count = 0;\n\n      while(count <= 3){\n        forecast_date.push(forecast_res.data[count].valid_date);\n        forecast_temp.push(forecast_res.data[count].temp);\n        forecast_humi.push(forecast_res.data[count].rh);\n        forecast_preci.push(forecast_res.data[count].precip);\n        count++;\n      }\n\n      let days = 7;\n      let temp = [];\n      let humi = [];\n      let preci = [];\n      let date_record = [];\n      while (days >= 1) {\n\n        let date = new Date();\n        let last = new Date(date.getTime() - (days * 24 * 60 * 60 * 1000));\n        let day = last.getDate();\n        let month = last.getMonth() + 1;\n        let year = last.getFullYear();\n        let back_date = year+'-'+month+'-'+day;\n\n        date_record.push(back_date);\n\n        let history_api_call = await fetch(`${api.base_h}past-weather.ashx?q=${city}&date=${back_date}&format=json&key=${api.key_h}`);\n        let result = await history_api_call.json();\n\n        console.log(result);\n\n        temp.push(result.data.weather[0].hourly[0].tempC);\n        humi.push(result.data.weather[0].hourly[0].humidity);\n        preci.push(result.data.weather[0].hourly[0].precipMM);\n        days--;\n      }\n\n      this.setState({\n        city: forecast_res.city_name,\n        country: forecast_res.country_code,\n        sunset_ts: forecast_res.data[0].sunset_ts,\n        desc: forecast_res.data[0].weather.description,\n        forecast_date: forecast_date,\n        forecast_temp: forecast_temp,\n        forecast_humi: forecast_humi,\n        forecast_preci: forecast_preci,\n\n        chartDataTemp: {\n          labels: date_record,\n          datasets: [\n            {\n              label: 'Temperature (Âº C)',\n              data: temp,\n              borderColor: '#ff0000'\n            }\n          ]\n        },\n\n        chartDataHumi: {\n          labels:date_record,\n          datasets: [\n            {\n              label: 'Humidity (%)',\n              data: humi,\n              borderColor: '#0000ff'\n            }\n          ]\n        },\n\n        chartDataPreci: {\n          labels: date_record,\n          datasets: [\n            {\n              label: 'Precipitation (mm)',\n              data: preci,\n              borderColor: '#008000'\n            }\n          ]\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n\n        <Title />\n\n        <Form loadSearch = {this.search} />\n\n        {this.state.city &&\n          <Weather\n            desc = {this.state.desc}\n            temp = {this.state.temp}\n            city = {this.state.city}\n            sunset_ts = {this.state.sunset_ts}\n            country = {this.state.country}\n            humi = {this.state.humi}\n            preci = {this.state.preci}\n            forecast_date = {this.state.forecast_date}\n            forecast_temp = {this.state.forecast_temp}\n            forecast_humi = {this.state.forecast_humi}\n            forecast_preci = {this.state.forecast_preci}\n            chartDataTemp = {this.state.chartDataTemp}\n            chartDataHumi = {this.state.chartDataHumi}\n            chartDataPreci = {this.state.chartDataPreci}\n          />\n        }\n\n\n\n        {this.state.city &&\n          <Chart\n            city = {this.state.city}\n            chartDataTemp = {this.state.chartDataTemp}\n            chartDataHumi = {this.state.chartDataHumi}\n            chartDataPreci = {this.state.chartDataPreci}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/moon.84545c28.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.d8b3b4bb.png\";"],"sourceRoot":""}